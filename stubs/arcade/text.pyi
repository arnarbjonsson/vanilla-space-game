import arcade
import pyglet
from arcade.texture_atlas import TextureAtlasBase
from arcade.types import Color, Point, RGBOrA255
from pathlib import Path
from typing import Any

__all__ = ['load_font', 'Text', 'create_text_sprite', 'draw_text']

class _ArcadeTextLayoutGroup(pyglet.text.layout.TextLayoutGroup):
    def set_state(self) -> None: ...
    def unset_state(self) -> None: ...

def load_font(path: str | Path) -> None: ...
FontNameOrNames = str | tuple[str, ...]

class Text:
    def __init__(self, text: str, x: float, y: float, color: RGBOrA255 = ..., font_size: float = 12, width: int | None = None, align: str = 'left', font_name: FontNameOrNames = ('calibri', 'arial'), bold: bool | str = False, italic: bool = False, anchor_x: str = 'left', anchor_y: str = 'baseline', multiline: bool = False, rotation: float = 0, batch: pyglet.graphics.Batch | None = None, group: pyglet.graphics.Group | None = None, z: float = 0, **kwargs) -> None: ...
    @property
    def label(self) -> pyglet.text.Label: ...
    def initialize(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None) -> None: ...
    @property
    def batch(self) -> pyglet.graphics.Batch | None: ...
    @batch.setter
    def batch(self, batch: pyglet.graphics.Batch): ...
    @property
    def group(self) -> pyglet.graphics.Group | None: ...
    @group.setter
    def group(self, group: pyglet.graphics.Group): ...
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value: Any): ...
    @property
    def text(self) -> str: ...
    @text.setter
    def text(self, value: Any): ...
    @property
    def x(self) -> float: ...
    @x.setter
    def x(self, x: float) -> None: ...
    @property
    def y(self) -> float: ...
    @y.setter
    def y(self, y: float): ...
    @property
    def z(self) -> float: ...
    @z.setter
    def z(self, z: float): ...
    @property
    def font_name(self) -> FontNameOrNames: ...
    @font_name.setter
    def font_name(self, font_name: FontNameOrNames) -> None: ...
    @property
    def font_size(self) -> float: ...
    @font_size.setter
    def font_size(self, font_size: float): ...
    @property
    def anchor_x(self) -> str: ...
    @anchor_x.setter
    def anchor_x(self, anchor_x: str): ...
    @property
    def anchor_y(self) -> str: ...
    @anchor_y.setter
    def anchor_y(self, anchor_y: str): ...
    @property
    def rotation(self) -> float: ...
    @rotation.setter
    def rotation(self, rotation: float): ...
    @property
    def color(self) -> Color: ...
    @color.setter
    def color(self, color: RGBOrA255): ...
    @property
    def width(self) -> int | None: ...
    @width.setter
    def width(self, width: int): ...
    @property
    def height(self) -> int | None: ...
    @height.setter
    def height(self, value: int): ...
    @property
    def size(self): ...
    @property
    def content_width(self) -> int: ...
    @property
    def content_height(self) -> int: ...
    @property
    def left(self) -> float: ...
    @property
    def right(self) -> float: ...
    @property
    def top(self) -> float: ...
    @property
    def bottom(self) -> float: ...
    @property
    def content_size(self) -> tuple[int, int]: ...
    @property
    def align(self) -> str: ...
    @align.setter
    def align(self, align: str): ...
    @property
    def bold(self) -> bool | str: ...
    @bold.setter
    def bold(self, bold: bool | str): ...
    @property
    def italic(self) -> bool | str: ...
    @italic.setter
    def italic(self, italic: bool | str): ...
    @property
    def multiline(self) -> bool: ...
    @multiline.setter
    def multiline(self, multiline: bool): ...
    def draw(self) -> None: ...
    def draw_debug(self, anchor_color: RGBOrA255 = ..., background_color: RGBOrA255 = ..., outline_color: RGBOrA255 = ...) -> None: ...
    @property
    def position(self) -> Point: ...
    @position.setter
    def position(self, point: Point): ...
    @property
    def tracking(self) -> float | None: ...
    @tracking.setter
    def tracking(self, value: float): ...
    def em_to_px(self, em: float) -> float: ...
    def px_to_em(self, px: float) -> float: ...

def create_text_sprite(text: str, color: RGBOrA255 = ..., font_size: float = 12.0, width: int | None = None, align: str = 'left', font_name: FontNameOrNames = ('calibri', 'arial'), bold: bool | str = False, italic: bool = False, anchor_x: str = 'left', multiline: bool = False, texture_atlas: TextureAtlasBase | None = None, background_color: RGBOrA255 | None = None) -> arcade.Sprite: ...
def draw_text(text: Any, x: float, y: float, color: RGBOrA255 = ..., font_size: float = 12.0, width: int | None = None, align: str = 'left', font_name: FontNameOrNames = ('calibri', 'arial'), bold: bool | str = False, italic: bool = False, anchor_x: str = 'left', anchor_y: str = 'baseline', multiline: bool = False, rotation: float = 0, z: float = 0): ...
