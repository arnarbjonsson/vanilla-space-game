import pyglet.window
import pyglet.window.mouse
from _typeshed import Incomplete
from arcade.camera import Projector
from arcade.camera.default import DefaultProjector
from arcade.context import ArcadeContext
from arcade.types import Color, RGBANormalized, RGBOrA255, Rect
from pyglet.display.base import Screen, ScreenMode
from pyglet.event import EVENT_HANDLE_STATE
from pyglet.window import MouseCursor

__all__ = ['get_screens', 'NoOpenGLException', 'Window', 'open_window', 'View', 'MOUSE_BUTTON_LEFT', 'MOUSE_BUTTON_MIDDLE', 'MOUSE_BUTTON_RIGHT']

MOUSE_BUTTON_LEFT: int
MOUSE_BUTTON_MIDDLE: int
MOUSE_BUTTON_RIGHT: int

def get_screens() -> list[Screen]: ...

class NoOpenGLException(Exception): ...

class Window(pyglet.window.Window):
    closed: bool
    headless: bool
    keyboard: pyglet.window.key.KeyStateHandler | None
    mouse: pyglet.window.mouse.MouseStateHandler | None
    def __init__(self, width: int = 1280, height: int = 720, title: str | None = 'Arcade Window', fullscreen: bool = False, resizable: bool = False, update_rate: float = ..., antialiasing: bool = True, gl_version: tuple[int, int] = (3, 3), screen: Screen | None = None, style: str | None = ..., visible: bool = True, vsync: bool = False, gc_mode: str = 'context_gc', center_window: bool = False, samples: int = 4, enable_polling: bool = True, gl_api: str = 'opengl', draw_rate: float = ..., fixed_rate: float = ..., fixed_frame_cap: int | None = None) -> None: ...
    @property
    def current_view(self) -> View | None: ...
    @property
    def ctx(self) -> ArcadeContext: ...
    def clear(self, color: RGBOrA255 | None = None, color_normalized: RGBANormalized | None = None, viewport: tuple[int, int, int, int] | None = None) -> None: ...
    @property
    def background_color(self) -> Color: ...
    @background_color.setter
    def background_color(self, value: RGBOrA255) -> None: ...
    @property
    def rect(self) -> Rect: ...
    def run(self, view: View | None = None) -> None: ...
    def close(self) -> None: ...
    def set_fullscreen(self, fullscreen: bool = True, screen: Incomplete | None = None, mode: ScreenMode | None = None, width: float | None = None, height: float | None = None) -> None: ...
    def center_window(self) -> None: ...
    def on_update(self, delta_time: float) -> bool | None: ...
    def on_fixed_update(self, delta_time: float): ...
    def flip(self) -> None: ...
    def set_update_rate(self, rate: float) -> None: ...
    def set_draw_rate(self, rate: float) -> None: ...
    def on_mouse_motion(self, x: int, y: int, dx: int, dy: int) -> EVENT_HANDLE_STATE: ...
    def on_mouse_press(self, x: int, y: int, button: int, modifiers: int) -> EVENT_HANDLE_STATE: ...
    def on_mouse_drag(self, x: int, y: int, dx: int, dy: int, buttons: int, modifiers: int) -> EVENT_HANDLE_STATE: ...
    def on_mouse_release(self, x: int, y: int, button: int, modifiers: int) -> EVENT_HANDLE_STATE: ...
    def on_mouse_scroll(self, x: int, y: int, scroll_x: float, scroll_y: float) -> EVENT_HANDLE_STATE: ...
    def set_mouse_visible(self, visible: bool = True) -> None: ...
    def on_action(self, action_name: str, state) -> None: ...
    def on_key_press(self, symbol: int, modifiers: int) -> EVENT_HANDLE_STATE: ...
    def on_key_release(self, symbol: int, modifiers: int) -> EVENT_HANDLE_STATE: ...
    def on_draw(self) -> EVENT_HANDLE_STATE: ...
    def on_resize(self, width: int, height: int) -> EVENT_HANDLE_STATE: ...
    def set_minimum_size(self, width: int, height: int) -> None: ...
    def set_maximum_size(self, width: int, height: int) -> None: ...
    def set_size(self, width: int, height: int) -> None: ...
    def get_size(self) -> tuple[int, int]: ...
    def get_location(self) -> tuple[int, int]: ...
    def set_visible(self, visible: bool = True): ...
    def use(self) -> None: ...
    @property
    def default_camera(self) -> DefaultProjector: ...
    @property
    def current_camera(self) -> Projector: ...
    @current_camera.setter
    def current_camera(self, next_camera) -> None: ...
    @property
    def viewport(self) -> tuple[int, int, int, int]: ...
    @viewport.setter
    def viewport(self, new_viewport: tuple[int, int, int, int]): ...
    def test(self, frames: int = 10) -> None: ...
    def show_view(self, new_view: View) -> None: ...
    def hide_view(self) -> None: ...
    def switch_to(self) -> None: ...
    def set_caption(self, caption) -> None: ...
    def set_location(self, x, y) -> None: ...
    def activate(self) -> None: ...
    def minimize(self) -> None: ...
    def maximize(self) -> None: ...
    def set_vsync(self, vsync: bool) -> None: ...
    def set_mouse_platform_visible(self, platform_visible: Incomplete | None = None) -> None: ...
    def set_exclusive_mouse(self, exclusive: bool = True) -> None: ...
    def set_exclusive_keyboard(self, exclusive: bool = True) -> None: ...
    def get_system_mouse_cursor(self, name) -> MouseCursor: ...
    def dispatch_events(self) -> None: ...
    def on_mouse_enter(self, x: int, y: int) -> EVENT_HANDLE_STATE: ...
    def on_mouse_leave(self, x: int, y: int) -> EVENT_HANDLE_STATE: ...
    @property
    def center(self) -> tuple[float, float]: ...
    @property
    def center_x(self) -> float: ...
    @property
    def center_y(self) -> float: ...
    @property
    def time(self) -> float: ...
    @property
    def fixed_time(self) -> float: ...
    @property
    def delta_time(self) -> float: ...
    @property
    def fixed_delta_time(self) -> float: ...

def open_window(width: int, height: int, window_title: str | None = None, resizable: bool = False, antialiasing: bool = True, **kwargs) -> Window: ...

class View:
    window: Incomplete
    def __init__(self, window: Window | None = None, background_color: RGBOrA255 | None = None) -> None: ...
    def clear(self, color: RGBOrA255 | None = None, color_normalized: RGBANormalized | None = None, viewport: tuple[int, int, int, int] | None = None) -> None: ...
    def on_update(self, delta_time: float) -> bool | None: ...
    def on_fixed_update(self, delta_time: float): ...
    def on_draw(self) -> bool | None: ...
    def on_show_view(self) -> None: ...
    def on_hide_view(self) -> None: ...
    def on_mouse_motion(self, x: int, y: int, dx: int, dy: int) -> bool | None: ...
    def on_mouse_press(self, x: int, y: int, button: int, modifiers: int) -> bool | None: ...
    def on_mouse_drag(self, x: int, y: int, dx: int, dy: int, _buttons: int, _modifiers: int) -> bool | None: ...
    def on_mouse_release(self, x: int, y: int, button: int, modifiers: int) -> bool | None: ...
    def on_mouse_scroll(self, x: int, y: int, scroll_x: int, scroll_y: int) -> bool | None: ...
    def on_key_press(self, symbol: int, modifiers: int) -> bool | None: ...
    def on_key_release(self, symbol: int, modifiers: int) -> bool | None: ...
    def on_resize(self, width: int, height: int) -> bool | None: ...
    def on_mouse_enter(self, x: int, y: int) -> bool | None: ...
    def on_mouse_leave(self, x: int, y: int) -> bool | None: ...
    @property
    def size(self) -> tuple[float, float]: ...
    @property
    def width(self) -> float: ...
    @property
    def height(self) -> float: ...
    @property
    def center(self) -> tuple[float, float]: ...
    @property
    def center_x(self) -> float: ...
    @property
    def center_y(self) -> float: ...
    @property
    def background_color(self) -> Color | None: ...
    @background_color.setter
    def background_color(self, value: RGBOrA255) -> None: ...
